.all_stages_rules: &all_stages_rules
  changes:
    - .gitlab-ci.yml

.rust_code_rules: &rust_code_rules
  changes:
    - src/seniorpw/**/*.rs
    - src/seniorpw/Cargo.toml
    - src/seniorpw/Cargo.lock

variables:
  # move cargo data into the project directory so it can be cached
  CARGO_HOME: ${CI_PROJECT_DIR}/.cargo
  # treat compiler warnings as errors (in clippy, when running tests, etc.)
  RUSTFLAGS: -Dwarnings

default:
  # cancel the job if a newer pipeline starts for the same MR or branch
  interruptible: true
  cache:
    # use the git branch or tag as cache key, so the cache will be
    # shared among CI runs for the same branch or tag
    key: ${CI_COMMIT_REF_SLUG}
    # we cache .cargo/ and target/, which effectively enables
    # incremental builds across different executions of the CI
    # for the same branch or the same merge request
    paths:
      - .cargo
      - src/seniorpw/target

stages:
  - test
  - prepare-release
  - build
  - upload
  - release

tests:
  stage: test
  image: docker.io/rust
  rules:
    - *all_stages_rules
    - *rust_code_rules
  script:
    - rustup component add rustfmt clippy
    - cd src/seniorpw
    - cargo fmt --check
    - cargo clippy --all-targets

prepare_release:
  stage: prepare-release
  image: registry.gitlab.com/gitlab-org/cli
  rules:
    - *all_stages_rules
    - *rust_code_rules
  script:
    - echo "Getting version string from Cargo.toml"
    - PKG_VERSION="$(grep '^version = "' src/seniorpw/Cargo.toml | head -n 1 | sed 's/.*"\(.*\)"$/\1/')"
    - echo "$PKG_VERSION"
    - echo "PKG_VERSION=$PKG_VERSION" >> variables.env
    - echo "$CI_PROJECT_URL"
    - PKG_VERSION_PREV="$(glab -R "$CI_PROJECT_URL" release view | head -n 1)"
    - echo "$PKG_VERSION_PREV"
    - CONTINUE_PIPELINE=false
    - test "$PKG_VERSION" != "$PKG_VERSION_PREV" && CONTINUE_PIPELINE=true
    - echo "CONTINUE_PIPELINE=$CONTINUE_PIPELINE" >> variables.env
    - echo "UPLOAD_URL=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/seniorpw/$PKG_VERSION" >> variables.env
    - echo 'TARGETTRIPLES=aarch64-linux-android aarch64-unknown-linux-gnu x86_64-unknown-linux-gnu' >> variables.env
    - cat variables.env
  artifacts:
    reports:
      dotenv: variables.env

build:
  stage: build
  image: docker.io/rust
  rules:
    - *all_stages_rules
    - *rust_code_rules
  script:
    - '[ "$CONTINUE_PIPELINE" != true ] && exit 0'
    - apt-get update
    - apt-get install -y gcc-aarch64-linux-gnu
    - |
      if [ ! -d "android-ndk-r27d" ]; then
        curl -LO "https://dl.google.com/android/repository/android-ndk-r27d-linux.zip"
        unzip android-ndk-r27d-linux.zip
      fi
    - export PATH="$PWD/android-ndk-r27d/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH"
    - mkdir bin
    - cd src/seniorpw/
    - rustup target add $TARGETTRIPLES
    - |
      for TARGETTRIPLE in $TARGETTRIPLES; do
        cargo build --release --target="$TARGETTRIPLE"
        mv target/$TARGETTRIPLE/release/senior ../../bin/senior-$PKG_VERSION-$TARGETTRIPLE
        mv target/$TARGETTRIPLE/release/senior-agent ../../bin/senior-agent-$PKG_VERSION-$TARGETTRIPLE
      done
    - ls -la ../../bin/
  artifacts:
    paths:
      - bin/

upload:
  stage: upload
  image: curlimages/curl:latest
  rules:
    - *all_stages_rules
    - *rust_code_rules
  script:
    - '[ "$CONTINUE_PIPELINE" != true ] && exit 0'
    - |
      for file in ./bin/*; do
        filename=$(basename "$file")
        echo "Uploading $file to $UPLOAD_URL/$filename"
        curl --location --header "JOB-TOKEN: ${CI_JOB_TOKEN}" \
            --upload-file "$file" \
            "$UPLOAD_URL/$filename"
      done

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - *all_stages_rules
    - *rust_code_rules
  script:
    - '[ "$CONTINUE_PIPELINE" != true ] && exit 0'
    - export ASSETSLINKS=
    - |
      for TARGETTRIPLE in $TARGETTRIPLES; do
        SENIOR_BIN="senior-$PKG_VERSION-$TARGETTRIPLE"
        SENIOR_AGENT_BIN="senior-agent-$PKG_VERSION-$TARGETTRIPLE"
        for ASSETFILE in "$SENIOR_BIN" "$SENIOR_AGENT_BIN"; do
          export ASSETSLINKS="$ASSETSLINKS"' --assets-link {"name":"'"$ASSETFILE"'","url":"'"$UPLOAD_URL/$ASSETFILE"'"}'
        done
      done
    - printf '%s\n' "$ASSETSLINKS"
    - |
      release-cli create \
      --name "$PKG_VERSION" \
      --tag-name "$PKG_VERSION" \
      $(printf "%s" "$ASSETSLINKS") \
      --assets-link "{\"name\":\"seniormenu-$PKG_VERSION\",\"url\":\"https://gitlab.com/$CI_PROJECT_PATH/-/raw/$CI_COMMIT_SHA/src/seniormenu?inline=false\"}" \
      --assets-link "{\"name\":\"senior-zsh-completion-$PKG_VERSION\",\"url\":\"https://gitlab.com/$CI_PROJECT_PATH/-/raw/$CI_COMMIT_SHA/src/completions/senior.zsh?inline=false\"}" \
      --assets-link "{\"name\":\"senior-bash-completion-$PKG_VERSION\",\"url\":\"https://gitlab.com/$CI_PROJECT_PATH/-/raw/$CI_COMMIT_SHA/src/completions/senior.bash?inline=false\"}"
